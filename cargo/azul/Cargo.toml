[package]
name = "azul"
version = "0.1.0"
authors = ["Felix Sch√ºtt <felix.schuett@maps4print.com>"]
license = "MIT"
description = '''
    Azul GUI is a free, functional, immediate-mode GUI framework
    for rapid development of desktop applications written in Rust,
    supported by the Mozilla WebRender rendering engine
'''
documentation = "https://docs.rs/azul"
homepage = "https://azul.rs/"
keywords = ["gui", "GUI", "user interface", "svg", "graphics" ]
categories = ["gui"]
repository = "https://github.com/maps4print/azul"
readme = "../README.md"
exclude = ["../assets/*", "../doc/*", "../examples/*"]
autoexamples = false

[lib]
path = "../../azul/lib.rs"

[dependencies]
azul-css                = { version = "0.1.0",                path = "../azul-css"                              }
azul-core               = { version = "0.1.0",                path = "../azul-core"                             }
azul-layout             = { version = "0.1.0",                path = "../azul-layout"                           }
azul-css-parser         = { version = "0.1.0",                path = "../azul-css-parser",      optional = true }
azul-widgets            = { version = "0.1.0",                path = "../azul-widgets",         optional = true }
azul-native-style       = { version = "0.1.0",                path = "../azul-native-style",    optional = true }

serde_derive            = { version = "1",                    optional = true }
serde                   = { version = "1",                    optional = true }
gleam                   = { version = "0.6"                                                                     }
glium                   = { version = "0.24.0", default-features = false, features = ["glutin"] }
euclid                  = { version = "0.19.4", default-features = false }
rusttype                = { version = "0.7.3", default-features = false }
app_units               = { version = "0.7.1", default-features = false }
unicode-normalization   = { version = "0.1.7", default-features = false }
lazy_static             = { version = "1.2.0", default-features = false }
tinyfiledialogs         = { version = "3.3.5", default-features = false }
clipboard2              = { version = "0.1.1", default-features = false }
font-loader             = { version = "0.8.0", default-features = false }
xmlparser               = { version = "0.6.1", default-features = false }
harfbuzz-sys            = { version = "0.3.0", default-features = false }
log                     = { version = "0.4.6", default-features = false, optional = true }
stb_truetype            = { version = "0.2.2", default-features = false, optional = true }
fern                    = { version = "0.5.7", default-features = false, optional = true }
backtrace               = { version = "0.3.12", default-features = false, optional = true, features = ["std", "libunwind", "libbacktrace", "coresymbolication", "dladdr", "dbghelp"] }
lyon                    = { version = "0.11.0", default-features = false, optional = true }
usvg                    = { version = "0.3.0",  default-features = false, optional = true }
image                   = { version = "0.20.1", default-features = false, optional = true, features = ["gif_codec", "jpeg", "png_codec", "pnm", "tiff", "bmp"] }
twox-hash               = { version = "1.3.0"}
harfbuzz                = { version = "0.3.0"}

# Linux: Use webrender with freetype feature enabled
[target.'cfg(target_os = "linux")'.dependencies]
webrender = { version = "0.58" }

# Windows: Use nativefiledialog because of better Unicode support for file browsers
# TODO: Unicode problems have been fixed upstream, update azul to tinyfiledialogs!
[target.'cfg(not(target_os = "linux"))'.dependencies]
# nfd = { version = "0.0.4", path = "./nfd-0.0.4", default-features = false }
webrender = { version = "0.58", default-features = false }

[features]
# The "SVG" feature only enables the creation of shapes / polygons, etc. not the actual parsing
# (which needs the `svg_parsing` feature).
default = [
    "logging",
    "widgets",
    "native_style",
    "css_parser",
]
# Enable this feature to enable crash logging & reporting.
# Azul will insert custom panic handlers to pop up a message and log
# crashes to an "error.log" file, see AppConfig for more details
logging = ["fern", "backtrace", "log"]

# The SVG rendering module is pretty huge since it needs lyon - if you don't use
# SVG rendering in your app, you can turn this off to increase compilation
# speed and decrease your binary size
svg = ["lyon", "stb_truetype"]
# This is for activating **parsing** of SVG files. If you, for example, just
# want to draw shapes on the screen, you do not need to activate this feature,
# this is just for parsing the SVG from a file.
svg_parsing = ["svg", "usvg"]
# If you want an application icon, you can either load it via the raw
# RGBA bytes or use the icon_loading feature to decode it from a PNG / JPG /
# whatever image format on startup. Note that this will import the image
# dependency and use a bit of extra runtime.
icon_loading = ["glium/icon_loading"]

# For serializing / deserializing CSS colors using serde
serde_serialization = ["serde_derive", "serde"]
serde_serialization_css = ["css_parser", "azul-css-parser/serde_serialization", "serde_serialization"]

# On some applications you might not want to load any images. For these purposes
# the image crate can be disabled, to speed up compile times
image_loading = ["image"]
# Features to load extra image formats
ico = ["image/ico"]
tga = ["image/tga"]
hdr = ["image/hdr"]
jpeg_rayon = ["image/jpeg_rayon"]
dxt = ["image/dxt"]
webp = ["image/webp"]
css_parser = ["azul-core/css_parser", "azul-css-parser"]
widgets = ["azul-widgets"]
native_style = ["azul-native-style"]
faster_hashing = ["azul-core/faster_hashing"]

[[example]]
name = "async"
path = "../examples/async/async.rs"
required-features = []

[[example]]
name = "calculator"
path = "../examples/calculator/calculator.rs"
required-features = []

[[example]]
name = "game_of_life"
path = "../examples/game_of_life/game_of_life.rs"
required-features = []

[[example]]
name = "hello_world"
path = "../examples/hello_world/hello_world.rs"
required-features = []


[[example]]
name = "hot_reload"
path = "../examples/hot_reload/hot_reload.rs"
required-features = ["image_loading"]

[[example]]
name = "list"
path = "../examples/list/list.rs"
required-features = []

[[example]]
name = "opengl"
path = "../examples/opengl/opengl.rs"
required-features = []

[[example]]
name = "slider"
path = "../examples/slider/slider.rs"
required-features = []

[[example]]
name = "svg"
path = "../examples/svg/svg.rs"
required-features = ["svg_parsing"]

[[example]]
name = "table"
path = "../examples/table/table.rs"
required-features = []

# [[example]]
# name = "text_editor"
# path = "../examples/text_editor/text_editor.rs"
# required-features = []

[[example]]
name = "text_input"
path = "../examples/text_input/text_input.rs"
required-features = []

[[example]]
name = "text_shaping"
path = "../examples/text_shaping/text_shaping.rs"
required-features = []

[[example]]
name = "transparent_window"
path = "../examples/transparent_window/transparent_window.rs"
required-features = []

[[example]]
name = "xml"
path = "../examples/xml/xml.rs"
required-features = []
